//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Data/Input/SimulationControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Sample.Input
{
    public partial class @SimulationControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @SimulationControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""SimulationControls"",
    ""maps"": [
        {
            ""name"": ""Controls"",
            ""id"": ""5c7f5faa-8376-4541-8bcd-2bc80a11c336"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""c9e54793-dab8-4dd7-85f3-94ba91832b5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delete"",
                    ""type"": ""Button"",
                    ""id"": ""9aa8619f-2748-4cf8-b2f3-9cbfe4374951"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""Value"",
                    ""id"": ""1ea04cf1-7710-46be-a124-33082a7f763a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleSimulation"",
                    ""type"": ""Button"",
                    ""id"": ""6487f138-ca16-4d98-b67d-5daa8e5191d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleLock"",
                    ""type"": ""Button"",
                    ""id"": ""861b57c4-9fda-4554-a4e1-702410861847"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""Value"",
                    ""id"": ""84b44c51-b439-409b-baa6-bf14c70c7276"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""813943be-8322-4f52-b6f2-6234008e1f6e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7ce96b5-620d-4922-9eaf-7accef044ef7"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79186121-317c-49dd-b856-97526490e49f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72183014-1f50-4a3d-b03b-0b32753d7be4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSimulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acf64a71-5d7a-4be8-bd45-4a909610a4a5"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleLock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6aee4a79-f9b9-4a3a-a7f0-a091186da886"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Controls
            m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
            m_Controls_Select = m_Controls.FindAction("Select", throwIfNotFound: true);
            m_Controls_Delete = m_Controls.FindAction("Delete", throwIfNotFound: true);
            m_Controls_Break = m_Controls.FindAction("Break", throwIfNotFound: true);
            m_Controls_ToggleSimulation = m_Controls.FindAction("ToggleSimulation", throwIfNotFound: true);
            m_Controls_ToggleLock = m_Controls.FindAction("ToggleLock", throwIfNotFound: true);
            m_Controls_CursorPosition = m_Controls.FindAction("CursorPosition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Controls
        private readonly InputActionMap m_Controls;
        private List<IControlsActions> m_ControlsActionsCallbackInterfaces = new List<IControlsActions>();
        private readonly InputAction m_Controls_Select;
        private readonly InputAction m_Controls_Delete;
        private readonly InputAction m_Controls_Break;
        private readonly InputAction m_Controls_ToggleSimulation;
        private readonly InputAction m_Controls_ToggleLock;
        private readonly InputAction m_Controls_CursorPosition;
        public struct ControlsActions
        {
            private @SimulationControls m_Wrapper;
            public ControlsActions(@SimulationControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Select => m_Wrapper.m_Controls_Select;
            public InputAction @Delete => m_Wrapper.m_Controls_Delete;
            public InputAction @Break => m_Wrapper.m_Controls_Break;
            public InputAction @ToggleSimulation => m_Wrapper.m_Controls_ToggleSimulation;
            public InputAction @ToggleLock => m_Wrapper.m_Controls_ToggleLock;
            public InputAction @CursorPosition => m_Wrapper.m_Controls_CursorPosition;
            public InputActionMap Get() { return m_Wrapper.m_Controls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
            public void AddCallbacks(IControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_ControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ControlsActionsCallbackInterfaces.Add(instance);
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Delete.started += instance.OnDelete;
                @Delete.performed += instance.OnDelete;
                @Delete.canceled += instance.OnDelete;
                @Break.started += instance.OnBreak;
                @Break.performed += instance.OnBreak;
                @Break.canceled += instance.OnBreak;
                @ToggleSimulation.started += instance.OnToggleSimulation;
                @ToggleSimulation.performed += instance.OnToggleSimulation;
                @ToggleSimulation.canceled += instance.OnToggleSimulation;
                @ToggleLock.started += instance.OnToggleLock;
                @ToggleLock.performed += instance.OnToggleLock;
                @ToggleLock.canceled += instance.OnToggleLock;
                @CursorPosition.started += instance.OnCursorPosition;
                @CursorPosition.performed += instance.OnCursorPosition;
                @CursorPosition.canceled += instance.OnCursorPosition;
            }

            private void UnregisterCallbacks(IControlsActions instance)
            {
                @Select.started -= instance.OnSelect;
                @Select.performed -= instance.OnSelect;
                @Select.canceled -= instance.OnSelect;
                @Delete.started -= instance.OnDelete;
                @Delete.performed -= instance.OnDelete;
                @Delete.canceled -= instance.OnDelete;
                @Break.started -= instance.OnBreak;
                @Break.performed -= instance.OnBreak;
                @Break.canceled -= instance.OnBreak;
                @ToggleSimulation.started -= instance.OnToggleSimulation;
                @ToggleSimulation.performed -= instance.OnToggleSimulation;
                @ToggleSimulation.canceled -= instance.OnToggleSimulation;
                @ToggleLock.started -= instance.OnToggleLock;
                @ToggleLock.performed -= instance.OnToggleLock;
                @ToggleLock.canceled -= instance.OnToggleLock;
                @CursorPosition.started -= instance.OnCursorPosition;
                @CursorPosition.performed -= instance.OnCursorPosition;
                @CursorPosition.canceled -= instance.OnCursorPosition;
            }

            public void RemoveCallbacks(IControlsActions instance)
            {
                if (m_Wrapper.m_ControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_ControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ControlsActions @Controls => new ControlsActions(this);
        public interface IControlsActions
        {
            void OnSelect(InputAction.CallbackContext context);
            void OnDelete(InputAction.CallbackContext context);
            void OnBreak(InputAction.CallbackContext context);
            void OnToggleSimulation(InputAction.CallbackContext context);
            void OnToggleLock(InputAction.CallbackContext context);
            void OnCursorPosition(InputAction.CallbackContext context);
        }
    }
}
